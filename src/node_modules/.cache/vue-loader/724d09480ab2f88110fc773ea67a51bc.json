{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/smedov/Work/Vue/VUE_CLI_Telegram_bot_api/VUE_CLI/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/smedov/Work/Vue/VUE_CLI_Telegram_bot_api/VUE_CLI/src/App.vue","mtime":1572254131671},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';//Импортируем компоненты\n\nimport index from './components/Index.vue';\nimport navbar from './components/navbar/Navbar.vue';\nimport newUserForm from './components/NewUserForm.vue';\nimport listOfUser from './components/ListOfUser.vue';\nimport fileTable from './components/FileTable.vue';\nimport home from './components/Home.vue';\nimport newFileForm from './components/NewFileForm.vue';\nimport componentsFilter from './components/Filter.vue';\n\nexport default {\n  name: 'app',\n\n  components: { // Добавим локальные компоненты\n\t\tnavbar,\n\t\thome,\n    newUserForm,\n    listOfUser,\n    index,\n\t\tfileTable,\n\t\tnewFileForm,\n\t\tcomponentsFilter\n  },\n\n  data() { // Переменные которые можно использовать в шаблоне\n    return {\n      userList: [],\n      user: null,\n\t\t\ttoken: null,\n\t\t\tfilesList: [],\n\t\t\tpage: \"home\",\t//переключатель отображаеммых данных\n\t\t\tmessage: \"\",\n\t\t\terrorServerMessage:\"\",\n\t\t\tshowDismissibleAlert:\"\"\n    }\n  },\n\n  mounted() { // Функция загрузки данных\n\t\tthis.token=localStorage.getItem('jwttoken')\n    if(this.token){\n\t\t\tthis.setTitleAuth()\n\t\t\tthis.refreshUserList() \t// Вызываем methods refreshUserList для обновления списка пользователей\n\t\t\tthis.refreshFileList()\t// Вызываем methods refreshFileList для обновления списка файлов\n\t\t\tthis.giveUser()\n\t\t}\n\n  },\n\n  methods: {\n\t\trefreshUserList() { //получаем таблицу с пользователями\n\t\t\taxios.get('http://localhost:3000/ajax/users')\n\t\t\t\t.then(response => (this.userList = response.data))\n\n    },\n\n\t\trefreshFileList(){\n\t\t\taxios.get('http://localhost:3000/ajax/users/fileTable')\n\t\t\t.then(response => {this.filesList = response.data.domenIpObj}\n\n\t\t\t)\n\t\t},\n\n\t\tgiveUser() {\n\t\t\taxios.get('http://localhost:3000/ajax/users/giveUser')\n\t\t\t\t.then(response => (this.user = response.data.currentUser))\n\n    },\n\n\t\tsetTitleAuth() {\n\t\t\t\tif(this.token){\n\t\t\t\t\taxios.defaults.headers.common = {Authorization : `bearer ${this.token}`}\t\t// bearer вид аунтификации такой // прикрепляю заголовок авторизации\n\t\t\t}\n\t\t},\n\n\t\texitUser() {\n\t\t\t\tthis.token = null\n\t\t\t\taxios.defaults.headers.common = null\t\t// bearer вид аунтификации такой // очищаю поле авторизации\n\t\t\t\tlocalStorage.removeItem('jwttoken')\n\t\t\t},\n\n\t\tauthUser(login, password) {\n\t\t\taxios({\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\turl: 'http://localhost:3000/ajax/users/dataChecking',\n\t\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\t\tlogin,\n\t\t\t\t\t\tpassword,\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(response => {\n\t\t\t\t\tthis.message = null\n\t\t\t\t\tthis.user =  response.data  // присвоим переменной полученного пользователя с сервера\n\t\t\t\t\tthis.token = response.data.token\t// присвоим переменной токен полученный токен с сервера\n\t\t\t\t\tlocalStorage.setItem('jwttoken',response.data.token)\t//Следующая функция создает элемент с данными в хранилище.\n\t\t\t\t\tthis.setTitleAuth()\n\t\t\t\t\tthis.refreshUserList();\n\t\t\t\t\tthis.refreshFileList()\n\t\t\t\t}) // Получаем json с сервера\n\t\t\t\t.catch((error)=> {\n\t\t\t\t\tconsole.log(error.response.data)\n\t\t\t\t\tthis.message = error.response.data.message\n\t\t\t\t});\n\t\t},\n//_________USER___________________\n\t\taddUser(status,name, login, password) { // связываем с помощью axios удаление на сервере\n\t\t\treturn axios({\n\t\t\t\tmethod: 'post', //метод запроса POST\n\t\t\t\turl: 'http://localhost:3000/ajax/users/addUser',\n\t\t\t\tdata: { // у Post должен быть data а не params\n\t\t\t\t\tstatus ,\n\t\t\t\t\tname ,\n\t\t\t\t\tlogin ,\n\t\t\t\t\tpassword\n\t\t\t\t\t}\n\t\t\t\t}).then(() => { // после удачного выполнения метода выполнится обновление таблицы\n\t\t\t\t\tthis.refreshUserList()\n\t\t\t\t})\n\t\t\t\t.catch((error)=> {\n\t\t\t\t\t\tthis.errorServerMessage = error.response.data.message;\n\t\t\t\t\t\tthis.showDismissibleAlert = true;\n\t\t\t\t\t\tconsole.log(this.errorServerMessage)\n\t\t\t\t\t});\n\t\t},\n\n\n\t\tdeleteUser(id) {\n\t\t\taxios ({\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\turl: 'http://localhost:3000/ajax/users/deleteUser',\n\t\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\t\tid\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.refreshUserList(); // после удачного выполнения метода выполнится обновление таблицы\n\t\t\t\t})\n\n\t\t\t},\n\n\t\tchangePassword(firstInput,secondInput,userId) {\n\t\t\taxios ({\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\turl: 'http://localhost:3000/ajax/users/changePassword',\n\t\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\t\tnewPass: {\n\t\t\t\t\t\t\tfirstInput,\n\t\t\t\t\t\t\tsecondInput,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tuserId\n\t\t\t\t\t}\n        })\n        .then(() => {\n          this.refreshUserList(); // после удачного выполнения метода выполнится обновление таблицы\n        })\n    },\n\n\t\t//______________FILES________________\n\n\t\taddFiles(domain,ip){\n\t\t\taxios ({\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\turl: 'http://localhost:3000/ajax/users/addFiles',\n\t\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\t\tdomain,\n\t\t\t\t\t\tip\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.refreshFileList(); // после удачного выполнения метода выполнится обновление таблицы\n\t\t\t\t})\n\t\t},\n\n\n\t\tdeleteFile(files){\n\t\t\taxios({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl: 'http://localhost:3000/ajax/users/deleteFiles',\n\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\tfiles\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tthis.refreshFileList()\n\t\t\t})\n\t\t},\n\n\t\tdirectoryContent(directory){\n\t\t\taxios({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl: 'http://localhost:3000/ajax/users/directoryContent',\n\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\tdirectory\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tthis.refreshFileList()\n\t\t\t})\n\t\t},\n\n\t\t//________________FILTER_____________________\n\n\t\ttableUserSearch(filterInput){\n\t\t\taxios({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl: 'http://localhost:3000/ajax/users/tableUserSearch',\n\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\tfilterInput\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(response => (this.userList = response.data.newSearchList))\n\t},\n\n\ttableFilesSearch(filterInput){\n\t\taxios({\n\t\t\tmethod: 'post',\n\t\t\turl: 'http://localhost:3000/ajax/users/tableFilesSearch',\n\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\tfilterInput\n\t\t\t}\n\t\t})\n\t\t.then(response => (this.filesList = response.data.newSearchList))\n},\n\n\n\n//_______ОТОБРАЖАЕМ КОМПОНЕНТЫ_________\n\t\t\tshowFiles() {\n\t\t\t\tthis.page = 'showFiles'\n\n\t\t\t},\n\n\t\t\tshowTableUser() {\n\t\t\t\tthis.page = 'showUser'\n\n\t\t\t}\n//_______ОТОБРАЖАЕМ КОМПОНЕНТЫ_________\n  }\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"App.vue","sourceRoot":".","sourcesContent":["<template lang='pug'>\ndiv <!--Должен быть обернут в один div / рендерим компоненты -->\n\tdiv(v-if=\"token!=null\" )\n\t\tnavbar(:user='user'  :exitUser='exitUser'  :showTableUser='showTableUser'  :showFiles='showFiles'  )\n\t\tdiv(v-if=\"page=='home'\")\n\t\t\thome\n\n\t\tdiv(v-if=\"page=='showFiles'\" )\n\t\t\tdiv.mt-3.d-flex.justify-content-center\n\t\t\t\tnewFileForm.mx-5(:addFiles='addFiles'  :users='user')\n\t\t\t\tcomponentsFilter.ml-5(:page='page'  :tableFilesSearch='tableFilesSearch'  )\n\t\t\tfileTable(:directoryContent='directoryContent'  :filesList='filesList'  :deleteFile='deleteFile'  :users='user')\n\n\t\tdiv(v-if=\"page=='showUser'\" )\n\t\t\tdiv.mt-3.d-flex.justify-content-center\n\t\t\t\tnewUserForm.mx-5(:addUser='addUser'  :errorServerMessage='errorServerMessage'  :users='user')\n\t\t\t\tcomponentsFilter.ml-5(:page='page'  :tableUserSearch='tableUserSearch')\n\t\t\tlistOfUser(  :userList='userList'  :deleteUser='deleteUser'  :changePassword='changePassword'  :users='user')\n\n\tindex(v-else  :authUser='authUser'  :message=\"message\")\n</template>\n\n\n<script>\nimport axios from 'axios';//Импортируем компоненты\n\nimport index from './components/Index.vue';\nimport navbar from './components/navbar/Navbar.vue';\nimport newUserForm from './components/NewUserForm.vue';\nimport listOfUser from './components/ListOfUser.vue';\nimport fileTable from './components/FileTable.vue';\nimport home from './components/Home.vue';\nimport newFileForm from './components/NewFileForm.vue';\nimport componentsFilter from './components/Filter.vue';\n\nexport default {\n  name: 'app',\n\n  components: { // Добавим локальные компоненты\n\t\tnavbar,\n\t\thome,\n    newUserForm,\n    listOfUser,\n    index,\n\t\tfileTable,\n\t\tnewFileForm,\n\t\tcomponentsFilter\n  },\n\n  data() { // Переменные которые можно использовать в шаблоне\n    return {\n      userList: [],\n      user: null,\n\t\t\ttoken: null,\n\t\t\tfilesList: [],\n\t\t\tpage: \"home\",\t//переключатель отображаеммых данных\n\t\t\tmessage: \"\",\n\t\t\terrorServerMessage:\"\",\n\t\t\tshowDismissibleAlert:\"\"\n    }\n  },\n\n  mounted() { // Функция загрузки данных\n\t\tthis.token=localStorage.getItem('jwttoken')\n    if(this.token){\n\t\t\tthis.setTitleAuth()\n\t\t\tthis.refreshUserList() \t// Вызываем methods refreshUserList для обновления списка пользователей\n\t\t\tthis.refreshFileList()\t// Вызываем methods refreshFileList для обновления списка файлов\n\t\t\tthis.giveUser()\n\t\t}\n\n  },\n\n  methods: {\n\t\trefreshUserList() { //получаем таблицу с пользователями\n\t\t\taxios.get('http://localhost:3000/ajax/users')\n\t\t\t\t.then(response => (this.userList = response.data))\n\n    },\n\n\t\trefreshFileList(){\n\t\t\taxios.get('http://localhost:3000/ajax/users/fileTable')\n\t\t\t.then(response => {this.filesList = response.data.domenIpObj}\n\n\t\t\t)\n\t\t},\n\n\t\tgiveUser() {\n\t\t\taxios.get('http://localhost:3000/ajax/users/giveUser')\n\t\t\t\t.then(response => (this.user = response.data.currentUser))\n\n    },\n\n\t\tsetTitleAuth() {\n\t\t\t\tif(this.token){\n\t\t\t\t\taxios.defaults.headers.common = {Authorization : `bearer ${this.token}`}\t\t// bearer вид аунтификации такой // прикрепляю заголовок авторизации\n\t\t\t}\n\t\t},\n\n\t\texitUser() {\n\t\t\t\tthis.token = null\n\t\t\t\taxios.defaults.headers.common = null\t\t// bearer вид аунтификации такой // очищаю поле авторизации\n\t\t\t\tlocalStorage.removeItem('jwttoken')\n\t\t\t},\n\n\t\tauthUser(login, password) {\n\t\t\taxios({\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\turl: 'http://localhost:3000/ajax/users/dataChecking',\n\t\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\t\tlogin,\n\t\t\t\t\t\tpassword,\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(response => {\n\t\t\t\t\tthis.message = null\n\t\t\t\t\tthis.user =  response.data  // присвоим переменной полученного пользователя с сервера\n\t\t\t\t\tthis.token = response.data.token\t// присвоим переменной токен полученный токен с сервера\n\t\t\t\t\tlocalStorage.setItem('jwttoken',response.data.token)\t//Следующая функция создает элемент с данными в хранилище.\n\t\t\t\t\tthis.setTitleAuth()\n\t\t\t\t\tthis.refreshUserList();\n\t\t\t\t\tthis.refreshFileList()\n\t\t\t\t}) // Получаем json с сервера\n\t\t\t\t.catch((error)=> {\n\t\t\t\t\tconsole.log(error.response.data)\n\t\t\t\t\tthis.message = error.response.data.message\n\t\t\t\t});\n\t\t},\n//_________USER___________________\n\t\taddUser(status,name, login, password) { // связываем с помощью axios удаление на сервере\n\t\t\treturn axios({\n\t\t\t\tmethod: 'post', //метод запроса POST\n\t\t\t\turl: 'http://localhost:3000/ajax/users/addUser',\n\t\t\t\tdata: { // у Post должен быть data а не params\n\t\t\t\t\tstatus ,\n\t\t\t\t\tname ,\n\t\t\t\t\tlogin ,\n\t\t\t\t\tpassword\n\t\t\t\t\t}\n\t\t\t\t}).then(() => { // после удачного выполнения метода выполнится обновление таблицы\n\t\t\t\t\tthis.refreshUserList()\n\t\t\t\t})\n\t\t\t\t.catch((error)=> {\n\t\t\t\t\t\tthis.errorServerMessage = error.response.data.message;\n\t\t\t\t\t\tthis.showDismissibleAlert = true;\n\t\t\t\t\t\tconsole.log(this.errorServerMessage)\n\t\t\t\t\t});\n\t\t},\n\n\n\t\tdeleteUser(id) {\n\t\t\taxios ({\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\turl: 'http://localhost:3000/ajax/users/deleteUser',\n\t\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\t\tid\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.refreshUserList(); // после удачного выполнения метода выполнится обновление таблицы\n\t\t\t\t})\n\n\t\t\t},\n\n\t\tchangePassword(firstInput,secondInput,userId) {\n\t\t\taxios ({\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\turl: 'http://localhost:3000/ajax/users/changePassword',\n\t\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\t\tnewPass: {\n\t\t\t\t\t\t\tfirstInput,\n\t\t\t\t\t\t\tsecondInput,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tuserId\n\t\t\t\t\t}\n        })\n        .then(() => {\n          this.refreshUserList(); // после удачного выполнения метода выполнится обновление таблицы\n        })\n    },\n\n\t\t//______________FILES________________\n\n\t\taddFiles(domain,ip){\n\t\t\taxios ({\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\turl: 'http://localhost:3000/ajax/users/addFiles',\n\t\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\t\tdomain,\n\t\t\t\t\t\tip\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.refreshFileList(); // после удачного выполнения метода выполнится обновление таблицы\n\t\t\t\t})\n\t\t},\n\n\n\t\tdeleteFile(files){\n\t\t\taxios({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl: 'http://localhost:3000/ajax/users/deleteFiles',\n\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\tfiles\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tthis.refreshFileList()\n\t\t\t})\n\t\t},\n\n\t\tdirectoryContent(directory){\n\t\t\taxios({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl: 'http://localhost:3000/ajax/users/directoryContent',\n\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\tdirectory\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tthis.refreshFileList()\n\t\t\t})\n\t\t},\n\n\t\t//________________FILTER_____________________\n\n\t\ttableUserSearch(filterInput){\n\t\t\taxios({\n\t\t\t\tmethod: 'post',\n\t\t\t\turl: 'http://localhost:3000/ajax/users/tableUserSearch',\n\t\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\t\tfilterInput\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(response => (this.userList = response.data.newSearchList))\n\t},\n\n\ttableFilesSearch(filterInput){\n\t\taxios({\n\t\t\tmethod: 'post',\n\t\t\turl: 'http://localhost:3000/ajax/users/tableFilesSearch',\n\t\t\tdata: { // у GET должен быть params а не data\n\t\t\t\tfilterInput\n\t\t\t}\n\t\t})\n\t\t.then(response => (this.filesList = response.data.newSearchList))\n},\n\n\n\n//_______ОТОБРАЖАЕМ КОМПОНЕНТЫ_________\n\t\t\tshowFiles() {\n\t\t\t\tthis.page = 'showFiles'\n\n\t\t\t},\n\n\t\t\tshowTableUser() {\n\t\t\t\tthis.page = 'showUser'\n\n\t\t\t}\n//_______ОТОБРАЖАЕМ КОМПОНЕНТЫ_________\n  }\n}\n</script>\n"]}]}